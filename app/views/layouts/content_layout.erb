<!DOCTYPE html>
<html>
<head>
  <title>Poet Image Description</title>
  <%= javascript_include_tag :defaults %>
  <%= javascript_include_tag 'jquery.scrollto' %>
  <%= javascript_include_tag 'jquery.lazyload.min' %>
  <%= javascript_include_tag 'ckeditor/ckeditor' %>
  <%= javascript_include_tag 'ckeditor/adapters/jquery' %>
  <%= stylesheet_link_tag 'poet' %>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.10.4/themes/excite-bike/jquery-ui.css">
  <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        jax: ["input/AsciiMath", "input/MathML", "input/TeX", "output/SVG", "output/NativeMML"],
        extensions: ["asciimath2jax.js", "tex2jax.js", "MathMenu.js", "MathZoom.js", "toMathML.js"],
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
          processEscapes: true
        }
      });
  </script>

  <script type="text/javascript">

  function handleImageCategory(element){
    form = element.form;
    parentElement = $(element).parent().parent().parent();
    jQuery.ajaxSetup({ 
      timeout: 5 * 1000,
      error: function(XMLHttpRequest, textStatus, errorThrown) {
                  alert("ERROR: Unable to save change\n" + errorThrown) }
      });
    authenticity_token = form.authenticity_token.value
    var id = $('.hidden-id', parentElement).val();
    var image_category_id = $('.dynamic-image-category-selector', parentElement).val();
    data = {
      "authenticity_token" : authenticity_token,
      "id" : id,
      "dynamic_image[image_category_id]" : image_category_id
    }
    jQuery.post("/imageDesc/dynamic_images/" + id, data, Poet.imageCategoryPostSave(id, image_category_id));
  }

  imageCategoryContent = [];
  // NOTE ESH: Preload all the category content in case it's used multiple times
  <% ImageCategory.all.each do |img_cat| %>
    $.get('/dynamic_images_sample_html/<%= img_cat.id %>', function(data) {
      imageCategoryContent[<%= img_cat.id %>] = data;
    });
  <% end %>

  // TODO: move this into the application.js file when we move away from frames
  // First load up the HTML file and inject it into the DOM
  $bookUrl = '<%= raw @book_url %>';
  $.get($bookUrl, function(data) {
    $('#result').html(data);

  // Inject DHTML into each image with previous description and current description
  
  var ckeditorConfig =
      {
        extraPlugins: 'onchange',
        minimumChangeMilliseconds: 100,
        scayt_autoStartup:true,
        toolbar :
        [
            { name: 'basicstyles', items : [ 'Bold','Italic','Underline' ] },
            { name: 'paragraph', items : [ 'NumberedList','BulletedList' ] },
            { name: 'editing', items : ['Scayt' ] },
            { name: 'styles', items : [ 'Format' ] },
            { name: 'insert', items : [ 'Table','Link','Unlink' ] },
            { name: 'tools', items : [ 'Undo', 'Redo', '-', 'Source','Maximize' ] }
        ]
      };
  $imageEditingControlHtml = $('.image-editing-controls', top.frames['content'].document).attr('template');
  my_instances = [];
  singleImage = <%= params['book_image_id'].present? ? 'true' : 'false' %>;
  singleImageId = '<%= params['book_image_id'] %>';
  if($imageEditingControlHtml != null) {
    $bookId = $('.image-editing-controls', top.frames['content'].document).attr('book-id');
    $imageEditingControlHtml = $imageEditingControlHtml.replace(/\\n/g, "\n");
    $('img', top.frames['content'].document).each(function(index, item) {
      $imgId = $(item).attr('img-id');
      if(!singleImage || singleImageId == $imgId) {
        currentImageNode = $(item);
        var imageParent = currentImageNode.parent();
        var altText = currentImageNode[0].alt;

        // Grab _edit_image_form.html.haml template HTML and inject in the appropriate place
        $newDiv = $($imageEditingControlHtml);

        $('form.description-form', $newDiv).bind('submit', function(evt) {
            if($(evt.target).find('.dynamic-image-category-selector').val() == "") {
              alert("Please specify a category for this image.")
              return false;
            } else {
              return true;
            }
        });
      
        $('form.description-form', $newDiv).bind('ajax:success',    function(data, html, status) {
          notification = $('.description-result', $(this).parent());
        
          notification = $(notification);
          notification.html("The description has been saved.");
          notification.css('fontWeight', 'bold');
          notification.css('color', 'green');
          var mySubmit = $('#dynamic_description_submit', $(this));
          $(mySubmit).focus();
          
          previewAuthor = $('.preview-author', $(this).parent());
          if(html != null && html.submitter != null) {
            previewAuthor.html('Author: ' + html.submitter)
          }
        });

        $('form.description-form', $newDiv).bind('ajax:error',    function(data, html, status) {
          notification = $('.description-result', $(this).parent());
          notification = $(notification);
          if($.parseJSON(html.responseText) != null) {
            notification.html($.parseJSON(html.responseText).join(", "));
          }
          else {
            notification.html("An error has occurred.");
          }
          notification.css('fontWeight', 'bold');
          notification.css('color', 'red');
          var mySubmit = $('#dynamic_description_submit', $(this));
          $(mySubmit).focus();
        });

        $('.collapsible', $newDiv).each(function(index, item) {
          triggerElement = $("<a href='#'>" + $(item).attr('trigger') + "</a>");
          triggerElement.insertBefore(item);
      
          triggerElement.click(function() {
            $(item).toggle("slow");
          return false;
        });
        });
        

        $('.toggle-math-desc', $newDiv).click(function() {
          $bodyNode = $(".math_desc_div", $(this).parent());
          if($bodyNode != null) {
            $bodyNode.toggle();
            var warningMessage = $('.math_warning_message', $(this).parent().parent());
            // show/hide the math helper 
            if ( $bodyNode.is(':visible')) {
              var descriptionNode = $("textarea[name='dynamic_description[body]']", $(this).parent().parent())[0];
              var my_editor = my_instances[descriptionNode.id];
              my_editor_data = '';
              if(my_editor != null) {
                my_editor_data = my_editor.getData();
              }
              if ((descriptionNode.value && descriptionNode.value.length > 0 && descriptionNode.value.indexOf('xmlns="http://www.w3.org/1998/Math/MathML"') == -1)
                   || (my_editor_data && my_editor_data.length > 0 && my_editor_data.indexOf('xmlns="http://www.w3.org/1998/Math/MathML"') == -1)){ 
                  warningMessage.show();
                  var textWarningMessage = $('.text_warning_message', $(this).parent().parent());
                  textWarningMessage.hide();
              }
              else {
                warningMessage.hide();
              }
            }
            else{
               warningMessage.hide();
            }
          }
          return false;
        });

        $('.equation-editor', $newDiv).keyup(Poet.debounce(function() {
          var $editorString = $('.equation-editor', $(this).parent())[0].value;
          var $svg_node = $('.svg_node',$(this).parent());
           $svg_node[0].innerHTML = '`' + $editorString + '`';
          MathJax.Hub.Typeset($svg_node[0]);
        }, 300));

        $('.add-to-desc', $newDiv).click(function() {
          var svg_node = $('.svg_node',$(this).parent())[0];
          var text_area = $('.equation-editor',$(this).parent())[0];
          var description_node = $("textarea[name='dynamic_description[body]']", $(this).parent().parent())[0];
          var my_editor = my_instances[description_node.id];

          MathJax.Hub.Queue(function() {
            var jaxen = MathJax.Hub.getAllJax(svg_node);
            toMathML(jaxen[0], function(mml) {
                if (my_editor.mode == 'wysiwyg') {
                    //insert altimg and alttext attributes
                    xmlDoc=loadXMLString(mml);
                    newatt=xmlDoc.createAttribute("altimg");
                    newatt.nodeValue="";
                    x=xmlDoc.getElementsByTagName("math");
                    x[0].setAttributeNode(newatt);
                    newatt=xmlDoc.createAttribute("alttext");
                    newatt.nodeValue= altText;
                    x[0].setAttributeNode(newatt);
                    var output = xmlToString(xmlDoc);
                    contents = my_editor.getData();
                    my_editor.setData(contents + output)
                }
                else
                  alert('You must exit View Source mode');
            })} );
            return false;
        });
        

        $('.add-description', $newDiv).click(function() {
            $('.new-description', $(this).parent().parent()).show();
            $(this).hide();

            //auto fill text area with first prodnote, if any exist
            if ($(imageParent).attr('class') === "imggroup") {
                var prodNotes = $('.prodnote', imageParent);
                //console.log(prodNotes.length);
                if (prodNotes.length > 0) {
                    //console.log(prodNotes[0].innerHTML);
                    $('textarea[name="dynamic_description[body]"]', imageParent).val(prodNotes[0].innerHTML);
                }
            }

            //auto click edit tab since there will be nothing to preview for a new description
            var editTab = $('.body-alternate-tab', $(this).parent().next());
            $(editTab).click();
        });
      
        $imgXmlId = $(item).attr('image-xml-id');
        $altText = $(item).attr('alt');
        $original = $(item).attr('original');
      
        // Grab meta-information about this dynamic image and adjust the appropriate DIV to reflect that
        $dataNode = $(".image-editing-description-" + $imgId, top.frames['content'].document);
          function setupTabbedInterfaceIds(fieldName) {
              var alternateTab = $('.' + fieldName + '-alternate-tab', $newDiv);
              var editTabId = fieldName + "-edit-tab_" + $imageId;
              alternateTab.attr('href', "#" + editTabId);
              var defaultTab = $('.' + fieldName + '-default-tab', $newDiv);
              var previewTabId = fieldName + "-preview-tab_" + $imageId;
              defaultTab.attr('href', "#" + previewTabId);
              var editContent = $('.' + fieldName + '-edit-content', $newDiv);
              editContent.attr('id', editTabId);
              var previewContent = $('.' + fieldName + '-preview-content', $newDiv);
              previewContent.attr('id', previewTabId);
          }

          if($dataNode != null) {
          // Manipulate the new node ($newDiv) before we insert it in the DOM to have data related to the current image plus the previous descriptions
          $dataNode = $($dataNode);
          $imageId = $dataNode.attr('image-id');
          $imageSource = $dataNode.attr('image-src');
          $imageOriginalSource = $dataNode.attr('image-original-src');

          currentImageNode.addClass('lazyload');
          currentImageNode.removeAttr('src');
          currentImageNode.attr('data-original', $imageSource);
        
          // set ID appropriately
          var categorySelect = $('.dynamic-image-category-selector', $newDiv);
          categorySelect.attr('id', categorySelect.attr('id') + $imageId);

          $descriptionBody = $dataNode.attr('description-body');
          if($descriptionBody != "" && $descriptionBody != null) {
            $descriptionBody = $descriptionBody.replace(/\\n/g, "\n");
          } else {
              $('.add-description-div', $newDiv).show();
              $('.new-description', $newDiv).hide();
          }
          //console.log("Have $descriptionBody="+$descriptionBody);
          $descriptionAuthor = $dataNode.attr('description-author');
            if($descriptionAuthor != null) {
                $descriptionAuthor = $descriptionAuthor.replace(/\\n/g, "\n");
            }
          $('textarea[name="dynamic_description[body]"]', $newDiv).val($descriptionBody);
          $(".preview-body", $newDiv).html($descriptionBody);
          $(".preview-author", $newDiv).html('Author: ' + $descriptionAuthor);
          $descriptionSummary = $dataNode.attr('description-summary');
          if($descriptionSummary != null) {
            $descriptionSummary = $descriptionSummary.replace(/\\n/g, "\n");
          }
          $('textarea[name="dynamic_description[summary]"]', $newDiv).val($descriptionSummary);
          $(".preview-summary", $newDiv).html($descriptionSummary);
          $descriptionSld = $dataNode.attr('description-sld');
          if($descriptionSld != null) {
            $descriptionSld = $descriptionSld.replace(/\\n/g, "\n");
          }
          $('textarea[name="dynamic_description[simplified_language_description]"]', $newDiv).val($descriptionSld);
          $(".preview-simplified_language_description", $newDiv).html($descriptionSld);
          $descriptionAnnotation = $dataNode.attr('description-annotation');
          if($descriptionAnnotation != null) {
            $descriptionAnnotation = $descriptionAnnotation.replace(/\\n/g, "\n");
          }
          $('textarea[name="dynamic_description[annotation]"]', $newDiv).val($descriptionAnnotation);
          
          
          $('input[name="dynamic_description[dynamic_image_attributes][id]"]', $newDiv).val($imageId);
          $descriptionImageCategoryId = $dataNode.attr('description-image-category-id');
          $('select[name="dynamic_description[dynamic_image_attributes][image_category_id]"]', $newDiv).val($descriptionImageCategoryId);
          
          // for non-empty category, nuke the null selector
          if($descriptionImageCategoryId != null && $descriptionImageCategoryId > 0) {
            $('.dynamic-image-category-selector option[value=""]', $newDiv).remove();

            // if category has helper content, populate it
            if (imageCategoryContent[$descriptionImageCategoryId]) {
              $('.category_description', $newDiv).html(imageCategoryContent[$descriptionImageCategoryId]);
            }
          }
          

          $('select[name="dynamic_description[target_age_start]"]', $newDiv).val($dataNode.attr('description-tas'));
          $('select[name="dynamic_description[target_age_end]"]', $newDiv).val($dataNode.attr('description-tae'));
          $('select[name="dynamic_description[target_grade_start]"]', $newDiv).val($dataNode.attr('description-tgs'));
          $('select[name="dynamic_description[target_grade_end]"]', $newDiv).val($dataNode.attr('description-tge'));

          $descriptionTactileSrc = $dataNode.attr('description-tactile-src');
          $('textarea[name="dynamic_description[tactile_src]"]', $newDiv).val($descriptionTactileSrc);
          $descriptionTactileTour = $dataNode.attr('description-tactile-tour');
          $('textarea[name="dynamic_description[tactile_tour]"]', $newDiv).val($descriptionTactileTour);


        
          orginalSizeLink = $('.original_size_link', $newDiv);
          if(orginalSizeLink != null) {
            orginalSizeLink.attr('href', $imageOriginalSource);
            orginalSizeLink.attr('class', 'original_image');
          }
          var $imageNumberText = $('.image_number_text', $newDiv);
          $imageNumberText.html('Image Number: ' + $imageId);
          $imageNumberText.attr('id', "image_number_" + $imageId);
          // If this is the first instance of the img, let them create new descriptions
          var $imageCategoryText = $('.image_category_text')
          if($original == '1') {
          // Update the hidden variable with the book ID so it has the correct book ID
          $("input[name='dynamic_description[book_id]']", $newDiv).attr('value', $bookId);
          // Update the hidden variable with the dynamic_image_id so it has the correct dynamic_image_id
          $("input[name='dynamic_description[dynamic_image_id]']", $newDiv).attr('value', $imageId);
          $bodyTextArea = $("textarea[name='dynamic_description[body]']", $newDiv);
          $bodyTextArea.attr('id', "dynamic_description_body_" + $imageId);


          // setup ids for summary tabbed interface
          setupTabbedInterfaceIds("body");
          setupTabbedInterfaceIds("summary");
          setupTabbedInterfaceIds("simplified_language_description");


          // Add 'for' attribute for labels to match 'id' attribute of fields for form accessibility
          var longDescLabel = $('.long-description-label', $newDiv);
          longDescLabel.attr('for', "dynamic_description_body_" + $imageId);

          var summaryTextArea = $("textarea[name='dynamic_description[summary]']", $newDiv);
          summaryTextArea.attr('id', "dynamic_description_summary_" + $imageId);
          var summaryLabel = $('.summary-label', $newDiv);
          summaryLabel.attr('for', "dynamic_description_summary_" + $imageId);

          var simplifiedTextArea = $("textarea[name='dynamic_description[simplified_language_description]']", $newDiv);
          simplifiedTextArea.attr('id', "dynamic_description_simplified_" + $imageId);
          var simplifiedLabel = $('.simplified-description-label', $newDiv);
          simplifiedLabel.attr('for', "dynamic_description_simplified_" + $imageId);

          var annotationTextArea = $("textarea[name='dynamic_description[annotation]']", $newDiv);
          annotationTextArea.attr('id', "dynamic_description_annotation_" + $imageId);
          var annotationLabel = $('.annotation-label', $newDiv);
          annotationLabel.attr('for', "dynamic_description_annotation_" + $imageId);
          
          var historyLink = $('.description-history', $newDiv);
          if(historyLink && historyLink.attr('href') != null) {
            historyLink.attr('href', historyLink.attr('href').replace('history_desc_image_id', $imageId));
            
			historyLink.click(function(event) {
				$(this).addClass("clickedHistoryLink");
				event.preventDefault();
				var historyDialog = $('<div id="history-dialog"></div>');
				$('body').append(historyDialog);
				historyDialog.load(historyLink.attr("href") + " #descriptionHistory").dialog({					
					width: 600,
					modal: true,
					close: function(event, ui) {
						$("#history-dialog").remove();
						$(".clickedHistoryLink:first").focus().removeClass("clickedHistoryLink");
					}
				});
				return false;
			});
            if($descriptionBody == null || $descriptionBody == '') {
              $(historyLink).hide();
            }
          }

          var fromAgeSelect = $("#dynamic_description_target_age_start", $newDiv);
          var newId = "dynamic_description_target_age_start_" + $imageId;
          fromAgeSelect.attr('id', newId);
          var fromAgeLabel = $('.from-age-label', $newDiv);
          fromAgeLabel.attr('for', newId);

          var toAgeSelect = $("#dynamic_description_target_age_end", $newDiv);
          newId = "dynamic_description_target_age_end_" + $imageId;
          toAgeSelect.attr('id', newId);
          var toAgeLabel = $('.to-age-label', $newDiv);
          toAgeLabel.attr('for', newId);

          var fromGradeSelect = $("#dynamic_description_target_grade_start", $newDiv);
          newId = "dynamic_description_target_grade_start_" + $imageId;
          fromGradeSelect.attr('id', newId);
          var fromGradeLabel = $('.from-grade-label', $newDiv);
          fromGradeLabel.attr('for', newId);

          var toGradeSelect = $("#dynamic_description_target_grade_end", $newDiv);
          newId = "dynamic_description_target_grade_end_" + $imageId;
          toGradeSelect.attr('id', newId);
          var toGradeLabel = $('.to-grade-label', $newDiv);
          toGradeLabel.attr('for', newId);

          var tactileSrcTextArea = $("textarea[name='dynamic_description[tactile_src]']", $newDiv);
          tactileSrcTextArea.attr('id', "dynamic_description_tactile_src_" + $imageId);
          var tactileSrcLabel = $('.tactile-source-label', $newDiv);
          tactileSrcLabel.attr('for', "dynamic_description_tactile_src_" + $imageId);

          var tactileTourTextArea = $("textarea[name='dynamic_description[tactile_tour]']", $newDiv);
          tactileTourTextArea.attr('id', "dynamic_description_tactile_tour_" + $imageId);
          var tactileTourLabel = $('.tactile-tour-label', $newDiv);
          tactileTourLabel.attr('for', "dynamic_description_tactile_tour_" + $imageId);
          $bodyTextArea.click(function() {
            // Remove any success/failure alert messaging; note that this will remove *all* alerts because of the parents() method call
            $('.description-result', $('.outer-dynamic-description-div', $bodyTextArea.parents())).html('');
          });
        }
          else {
            // Hide the area where you can enter new descriptions
            $('.new-description', $newDiv).hide();
            $('.add-description-div', $newDiv).hide();
            $('.duplicate-image', $newDiv).show();
            $('.duplicate-image-id', $newDiv).replaceWith($imgId);
          }
        }
        $newDiv.insertAfter(item);
        $('.actual_image', $newDiv).html($(item));

        // show alt text
        if($altText) {
          $('.alt_text', $newDiv).html('Alt Text:' + $altText);
        }
        else {
          $('.alt_text', $newDiv).html('Alt Text: (No description provided by publisher)');
        }
        
        $('.alt_text', $newDiv).insertAfter(item);
        $('<hr/>').insertAfter(item);
      }
    })
  }

  // init lazyload
  console.log("Lazy load!!");
  $("img.lazyload").lazyload({
    threshold : 100
  });

  $.getScript("https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML");

    //  When user clicks on tab, this code will be executed
    $(".tabs li").each(function() { $(this).click(function() {
        var myAncestorElement =  $(this).parent().parent().parent();

        var tabs =  $(".tabs li", myAncestorElement);
        var className = $(tabs).children()[0].className;
        var fieldName = className.split("-")[0];

        //  First remove class "active" from currently active tab
        $(tabs).removeClass('active');

        //  Now add class "active" to the selected/clicked tab
        $(this).addClass("active");

        //  Hide all tab content
        $(".tab_content", myAncestorElement).hide();

        //  Here we get the href value of the selected tab
        var selected_tab = $(this).find("a").attr("href");
        var descriptionNode = $('textarea[name="dynamic_description[' + fieldName + ']"]', myAncestorElement);        
        var warningMessage = $('.text_warning_message', myAncestorElement);  
        var my_editor = my_instances[descriptionNode.attr('id')];
        var unsaved_text = '';
        if(my_editor != null) {
          unsaved_text = my_editor.getData();
        }
        
        if ((descriptionNode.val().indexOf('xmlns="http://www.w3.org/1998/Math/MathML"') > -1) ||
            (unsaved_text && unsaved_text.length > 0 && unsaved_text.indexOf('xmlns="http://www.w3.org/1998/Math/MathML"') > -1)){
          warningMessage.show();
          var mathWarningMessage = $('.math_warning_message', myAncestorElement);
          mathWarningMessage.hide();
        }
        else {
          warningMessage.hide();  
        }
        
        
        if ($(selected_tab).attr('class').indexOf("preview-content") > 0) {
            //get most current html from editor and assign to preview div
            $(".preview-" + fieldName, myAncestorElement).html(my_instances[descriptionNode.attr('id')].getData());
            MathJax.Hub.Typeset($('.preview-' + fieldName,myAncestorElement)[0]);

        } else {
            //enable CKEditor for this textarea
            if(!descriptionNode.next().hasClass('cke_skin_kama')) {
                var editor = CKEDITOR.replace( descriptionNode.attr('id'),ckeditorConfig);
                my_instances[descriptionNode.attr('id')] = editor;
                editor.on('change', function(ev) { 
                 if (ev.editor.getData()){
                  var textWarningMessage = $('.text_warning_message', myAncestorElement);
                  var mathWarningMessage = $('.math_warning_message', myAncestorElement);
                  if (new String(ev.editor.getData()).indexOf('xmlns="http://www.w3.org/1998/Math/MathML"') > -1){
                     textWarningMessage.show(); 
                     mathWarningMessage.hide(); 
                  }
                  else { //text entered
                    $bodyNode = $(".math_desc_div", myAncestorElement);
                    if ( $bodyNode!=null  && $bodyNode.is(':visible')) {
                      mathWarningMessage.show();
                      textWarningMessage.hide();  
                    }
                  } 
                }                
              });
                
            }
        }
        //  Show the selected tab content
        $(selected_tab).fadeIn();
        //  At the end, we add return false so that the click on the link is not executed
        return false;
    });});
  });

  <!-- groups.google.com/d/topic/mathjax-users/unL8IjcrTto/discussion -->
    function toMathML(jax, callback) {
      var mml;
      try {
        mml = jax.root.toMathML("");
      } catch(err) {
        if (!err.restart) { throw err; }
        return MathJax.Callback.After([toMathML, jax, callback], err, restart);
      }
      MathJax.Callback(callback)(mml);
    }

    function loadXMLString(txt)
    {
        if (window.DOMParser)
          {
          parser=new DOMParser();
          xmlDoc=parser.parseFromString(txt,"text/xml");
          }
        else // Internet Explorer
          {
          xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
          xmlDoc.async=false;
          xmlDoc.loadXML(txt);
          }
        return xmlDoc;
    }

    function xmlToString(doc)
    {
        if (window.DOMParser)
        {
            xmlString = (new XMLSerializer()).serializeToString(xmlDoc);
        }
        else
        {
            xmlString = xmlDoc.xml;
        }
        return xmlString;
    }
  </script>

  <style type="text/css">
  .toolbar  { position:fixed; top:0px; left:1px; padding:1px; font-family:Arial;  background:#fffea1; border:1px solid #fc0; font-size: 80%;}
  .original_image {font-family:Arial; font-size: 80%; font-weight: bold;}
  .preview {border: 1px gray solid; margin: 2px 0px 2px 0px; padding-left: 2px;}
  .svg_node {padding: 10px;}
  .alt_text {display: block; font-size: 80%; font-weight:bold; border:1px solid #ccc; margin: 2px; text-align: left;}
  label {font-weight: bold;}

  .tabs_container {
      border-bottom: 1px solid #ccc;
  }
  .tabs {
      list-style: none;
      padding: 5px 0 4px 0;
      margin: 0 0 0 10px;
      font: 0.75em arial;
  }
  .tabs li {
      display: inline;
  }
  .tabs li a {
      border: 1px solid #ccc;
      padding: 4px 6px;
      text-decoration: none;
      background-color: #eeeeee;
      border-bottom: none;
      outline: none;
      border-radius: 5px 5px 0 0;
      -moz-border-radius: 5px 5px 0 0;
      -webkit-border-top-left-radius: 5px;
      -webkit-border-top-right-radius: 5px;
  }
  .tabs li a:hover {
      background-color: #dddddd;
      padding: 4px 6px;
  }
  .tabs li.active a {
      border-bottom: 1px solid #fff;
      background-color: #fff;
      padding: 4px 6px 5px 6px;
      border-bottom: none;
  }
  .tabs li.active a:hover {
      background-color: #eeeeee;
      padding: 4px 6px 5px 6px;
      border-bottom: none;
  }

  .tabs_content_container {
      border: 1px solid #ccc;
      border-top: none;
      padding: 10px;
  }
  .tab_content {
      display: none;
  }

  .preview-author {
      border: 1px solid #ccc;
      margin-top: 12px;
      font-weight: bold;
      font-size: 80%;
  }

  </style>
</head>

  <body class="index admin_books active_admin logged_in admin_namespace">

  <div class="toolbar" style="width:350px;">
    <b><%= @book.title %></b>
 </div>
  </div>
<div class='image-editing-controls' template="<%= h generate_html(:partial => 'edit_book/edit_image_form')%>" book-id="<%= @book.id %>"></div>

<%=yield%>
<div id='result'></div>

<% DynamicImage.includes(:dynamic_description).where(:book_id => @book.id, :book_fragment_id => @book_fragment.id).each do |dynamic_image| %>
  <% description = dynamic_image.dynamic_description %>
  <% description_body = description && description.body ? description.body : '' %>
  <div class='image-editing-description-<%= dynamic_image.id.to_s.force_encoding("UTF-8") %>' image-original-src ="<%= dynamic_image.image_source(@host).to_s.force_encoding("UTF-8")%>" image-src="<%= dynamic_image.medium_source(@host).to_s.force_encoding("UTF-8") %>" image-id="<%= dynamic_image.id.to_s.force_encoding("UTF-8") %>" image-xml-id="<%= dynamic_image.xml_id.to_s.force_encoding("UTF-8") %>" description-body="<%= description_body %>" description-summary="<%= description ? description.summary : '' %>" description-sld="<%= description ? description.simplified_language_description : '' %>" description-annotation="<%= description ? description.annotation : '' %>" description-tactile-src="<%= description ? description.tactile_src : '' %>" description-tactile-tour="<%= description ? description.tactile_tour : '' %>" description-tas="<%= description ? description.target_age_start : '' %>" description-tae="<%= description ? description.target_age_end : '' %>" description-tgs="<%= description ? description.target_grade_start : '' %>" description-tge="<%= description ? description.target_grade_end : '' %>" description-author= "<%= (description && description.submitter_id) ? description.submitter_name : '' %>" description-image-category-id="<%= dynamic_image.image_category_id %>"></div>
<% end %>

</body></html>